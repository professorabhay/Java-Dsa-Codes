OOPs -> s is defined as Structure [Real Life Structure], System [Organizing] !

Hierarchy - 

Object -> Class -> Interface -> [Package] 

Pillars - Encapsulation, Abstraction, Inheritance, Polymorphism

Object -> Physical Entity
Class  -> Logical Entity

class Myclass {
	
}

Encapsulation -> Wrapping data in single unit for securing. [ Data Hiding ]

Abstraction -> Hiding Irrelevant information which is not needed to someone. [ Implementation Hiding ]

Abstraction -> [Abstact , Interface (blueprint)]

Inheritance -> Parent class -> Child  class [which also have properties same as parent]


Static keyword -> Use for access anything globally 


Whenever you defined a constructor by own then you have to define default constructor also (if accessing) because java defined constructor autometically (default) until you do not making it implicit.


Polymorphism -> Same method with different parameter/ classes/ dataType 



COLLECTION FRAMEWORK -> 

Collection interface and Map Interface [store multiple values]


interface ke object nahi bante hae , class ke bante hae kyoki interface is blueprint 

interface -> class -> objects

wrapper class => which wrap data types like int, char
to -> Integer, Character 


Generics -> Placeholder data type


Collection FRAMEWORK -> 

List -> Arraylist, linkedlist, vector, Stack

Sets -> Unordered with unique value -
    HashSet
    LinkedHashSet
    
SortedSet <- TreeSet

Exception Handling -> Unexpected events occurs and that we have to manage!

use- 
try block
catch block
finally block
throw
throws














